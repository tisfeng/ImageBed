<!DOCTYPE html>
<!--[if IE 6]><html class="ie lt-ie8"><![endif]-->
<!--[if IE 7]><html class="ie lt-ie8"><![endif]-->
<!--[if IE 8]><html class="ie ie8"><![endif]-->
<!--[if IE 9]><html class="ie ie9"><![endif]-->
<!--[if !IE]><!--> <html> <!--<![endif]-->

<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=Edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0,user-scalable=no">

  <!-- Start of Baidu Transcode -->
  <meta http-equiv="Cache-Control" content="no-siteapp" />
  <meta http-equiv="Cache-Control" content="no-transform" />
  <meta name="applicable-device" content="pc,mobile">
  <meta name="MobileOptimized" content="width"/>
  <meta name="HandheldFriendly" content="true"/>
  <meta name="mobile-agent" content="format=html5;url=https://www.jianshu.com/p/45cbd324ea65">
  <!-- End of Baidu Transcode -->

    <meta name="description"  content="KVC（Key-value coding）键值编码，单看这个名字可能不太好理解。其实翻译一下就很简单了，就是指iOS的开发中，可以允许开发者通过Key名直接访问对象的属性，或者给对象的属性赋值。而不需要调用明确的存取方法。这样就可以在运行时动态地访问和修改对象的属性。而不是在编译时确定，这也是iOS开发中的黑魔法之一。很多高级的iOS开发技巧都是基于KVC实现的。目前网上关于KVC的文章在非...">

  <meta name="360-site-verification" content="604a14b53c6b871206001285921e81d8" />
  <meta property="wb:webmaster" content="294ec9de89e7fadb" />
  <meta property="qc:admins" content="104102651453316562112116375" />
  <meta property="qc:admins" content="11635613706305617" />
  <meta property="qc:admins" content="1163561616621163056375" />
  <meta name="google-site-verification" content="cV4-qkUJZR6gmFeajx_UyPe47GW9vY6cnCrYtCHYNh4" />
  <meta name="google-site-verification" content="HF7lfF8YEGs1qtCE-kPml8Z469e2RHhGajy6JPVy5XI" />
  <meta http-equiv="mobile-agent" content="format=html5; url=https://www.jianshu.com/p/45cbd324ea65">

  <!-- Apple -->
  <meta name="apple-mobile-web-app-title" content="简书">

    <!--  Meta for Smart App Banner -->
  <meta name="apple-itunes-app" content="app-id=888237539, app-argument=jianshu://notes/3663234">
  <!-- End -->

  <!--  Meta for Twitter Card -->
  <meta content="summary" property="twitter:card">
  <meta content="@jianshucom" property="twitter:site">
  <meta content="iOS开发技巧系列---详解KVC(我告诉你KVC的一切)" property="twitter:title">
  <meta content="KVC（Key-value coding）键值编码，单看这个名字可能不太好理解。其实翻译一下就很简单了，就是指iOS的开发中，可以允许开发者通过Key名直接访问对象的属性，或..." property="twitter:description">
  <meta content="https://www.jianshu.com/p/45cbd324ea65" property="twitter:url">
  <!-- End -->

  <!--  Meta for OpenGraph -->
  <meta property="fb:app_id" content="865829053512461">
  <meta property="og:site_name" content="简书">
  <meta property="og:title" content="iOS开发技巧系列---详解KVC(我告诉你KVC的一切)">
  <meta property="og:type" content="article">
  <meta property="og:url" content="https://www.jianshu.com/p/45cbd324ea65">
  <meta property="og:description" content="KVC（Key-value coding）键值编码，单看这个名字可能不太好理解。其实翻译一下就很简单了，就是指iOS的开发中，可以允许开发者通过Key名直接访问对象的属性，或者给对象的属性赋值。...">
  <!-- End -->

  <!--  Meta for Facebook Applinks -->
  <meta property="al:ios:url" content="jianshu://notes/3663234" />
  <meta property="al:ios:app_store_id" content="888237539" />
  <meta property="al:ios:app_name" content="简书" />

  <meta property="al:android:url" content="jianshu://notes/3663234" />
  <meta property="al:android:package" content="com.jianshu.haruki" />
  <meta property="al:android:app_name" content="简书" />
  <!-- End -->


    <title>iOS开发技巧系列---详解KVC(我告诉你KVC的一切) - 简书</title>

  <meta name="csrf-param" content="authenticity_token" />
<meta name="csrf-token" content="Tbnnh/XZofeocQpjMjTsEji/eV2+gdCxdsBIxB1A8zRYLySZRlDcyAJML6ws5o1/hGcqwbflhM4sK24x5HnNxg==" />

  <link rel="stylesheet" media="all" href="//cdn2.jianshu.io/assets/web-9a35404942d5847b002c.css" />
  
  <link rel="stylesheet" media="all" href="//cdn2.jianshu.io/assets/web/pages/notes/show/entry-00e12f5a757a30f65da3.css" />

  <link href="//cdn2.jianshu.io/assets/favicons/favicon-e743bfb1821442341c3ab15bdbe804f7ad97676bd07a770ccc9483473aa76f06.ico" rel="shortcut icon" type="image/x-icon">
      <link rel="apple-touch-icon-precomposed" href="//cdn2.jianshu.io/assets/apple-touch-icons/57-a6f1f1ee62ace44f6dc2f6a08575abd3c3b163288881c78dd8d75247682a4b27.png" sizes="57x57" />
      <link rel="apple-touch-icon-precomposed" href="//cdn2.jianshu.io/assets/apple-touch-icons/72-fb9834bcfce738fd7b9c5e31363e79443e09a81a8e931170b58bc815387c1562.png" sizes="72x72" />
      <link rel="apple-touch-icon-precomposed" href="//cdn2.jianshu.io/assets/apple-touch-icons/76-49d88e539ff2489475d603994988d871219141ecaa0b1a7a9a1914f4fe3182d6.png" sizes="76x76" />
      <link rel="apple-touch-icon-precomposed" href="//cdn2.jianshu.io/assets/apple-touch-icons/114-24252fe693524ed3a9d0905e49bff3cbd0228f25a320aa09053c2ebb4955de97.png" sizes="114x114" />
      <link rel="apple-touch-icon-precomposed" href="//cdn2.jianshu.io/assets/apple-touch-icons/120-1bb7371f5e87f93ce780a5f1a05ff1b176828ee0d1d130e768575918a2e05834.png" sizes="120x120" />
      <link rel="apple-touch-icon-precomposed" href="//cdn2.jianshu.io/assets/apple-touch-icons/152-bf209460fc1c17bfd3e2b84c8e758bc11ca3e570fd411c3bbd84149b97453b99.png" sizes="152x152" />

  <!-- Start of 访问统计 -->
    <script>
    var _hmt = _hmt || [];
    (function() {
      var hm = document.createElement("script");
      hm.src = "//hm.baidu.com/hm.js?0c0e9d9b1e7d617b3e6842e85b9fb068";
      var s = document.getElementsByTagName("script")[0];
      s.parentNode.insertBefore(hm, s);
    })();
  </script>

  <!-- End of 访问统计 -->
</head>

  <!-- 只给10%的用户添加代码 -->
  <!-- ###第四范式-智能推荐：代码直接复制 无需修改参数### -->
  <!-- ###功能：上报内容并反馈用户行为### -->
  <!--
  -->
  <body lang="zh-CN" class="reader-black-font">
    <!-- 全局顶部导航栏 -->
<nav class="navbar navbar-default navbar-fixed-top" role="navigation">
  <div class="width-limit">
    <!-- 左上方 Logo -->
    <a class="logo" href="/"><img src="//cdn2.jianshu.io/assets/web/nav-logo-4c7bbafe27adc892f3046e6978459bac.png" alt="Nav logo" /></a>

    <!-- 右上角 -->
      <!-- 未登录显示登录/注册/写文章 -->
      <a class="btn write-btn" target="_blank" href="/writer#/">
        <i class="iconfont ic-write"></i>写文章
</a>      <a class="btn sign-up" id="sign_up" href="/sign_up">注册</a>
      <a class="btn log-in" id="sign_in" href="/sign_in">登录</a>

    <!-- 如果用户登录，显示下拉菜单 -->

    <div id="view-mode-ctrl">
    </div>
    <div class="container">
      <div class="navbar-header">
        <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#menu" aria-expanded="false">
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
      </div>
      <div class="collapse navbar-collapse" id="menu">
        <ul class="nav navbar-nav">
            <li class="tab ">
              <a href="/">
                <span class="menu-text">首页</span><i class="iconfont ic-navigation-discover menu-icon"></i>
</a>            </li>
            <li class="tab ">
              <a id="web-nav-app-download-btn" class="app-download-btn" href="/apps?utm_medium=desktop&amp;utm_source=navbar-apps"><span class="menu-text">下载App</span><i class="iconfont ic-navigation-download menu-icon"></i></a>
            </li>
          <li class="search">
            <form target="_blank" action="/search" accept-charset="UTF-8" method="get"><input name="utf8" type="hidden" value="&#x2713;" />
              <input type="text" name="q" id="q" value="" autocomplete="off" placeholder="搜索" class="search-input" />
              <a class="search-btn" href="javascript:void(null)"><i class="iconfont ic-search"></i></a>
</form>          </li>
        </ul>
      </div>
    </div>
  </div>
</nav>

    
<div class="note">
  <div id="note-fixed-ad-container">
      <a target="_blank" href="/apps/redirect?utm_source=side-banner-click" id="web-note-ad-fixed"><span class="close">&times;</span></a>
    <div id="fixed-ad-container">
      <span id="youdao-fixed-ad" class="ad-badge">广告</span>
      <div id="_so_pdsBy_0"></div>
    </div>
  </div>
  <div class="post">
    <div class="article">
        <h1 class="title">iOS开发技巧系列---详解KVC(我告诉你KVC的一切)</h1>

        <!-- 作者区域 -->
        <div class="author">
          <a class="avatar" href="/u/ba6dc2f48796">
            <img src="//upload.jianshu.io/users/upload_avatars/1281203/e0d85576e91a?imageMogr2/auto-orient/strip|imageView2/1/w/96/h/96" alt="96" />
</a>          <div class="info">
            <span class="name"><a href="/u/ba6dc2f48796">黑暗中的孤影</a></span>
            <!-- 关注用户按钮 -->
            <div props-data-classes="user-follow-button-header" data-author-follow-button></div>
            <!-- 文章数据信息 -->
            <div class="meta">
              <!-- 如果文章更新时间大于发布时间，那么使用 tooltip 显示更新时间 -->
                <span class="publish-time" data-toggle="tooltip" data-placement="bottom" title="最后编辑于 2017.12.03 04:35">2016.04.21 10:58*</span>
              <span class="wordage">字数 6369</span>
            </div>
          </div>
          <!-- 如果是当前作者，加入编辑按钮 -->
        </div>


        <!-- 文章内容 -->
        <div data-note-content class="show-content">
          <div class="show-content-free">
            <div class="image-package">
<div class="image-container" style="max-width: 700px; max-height: 393px;">
<div class="image-container-fill" style="padding-bottom: 56.25%;"></div>
<div class="image-view" data-width="1920" data-height="1080"><img data-original-src="//upload-images.jianshu.io/upload_images/1281203-87d796716b3a5f72.jpg" data-original-width="1920" data-original-height="1080" data-original-format="image/jpeg" data-original-filesize="668614"></div>
</div>
<div class="image-caption"></div>
</div>
<blockquote>
<p>KVC（Key-value coding）键值编码，单看这个名字可能不太好理解。其实翻译一下就很简单了，就是指iOS的开发中，可以允许开发者通过Key名直接访问对象的属性，或者给对象的属性赋值。而不需要调用明确的存取方法。这样就可以在运行时动态地访问和修改对象的属性。而不是在编译时确定，这也是iOS开发中的黑魔法之一。很多高级的iOS开发技巧都是基于KVC实现的。目前网上关于KVC的文章在非常多，有的只是简单地说了下用法，有的讲得深入但是在使用场景和最佳实践没有说明，我写下这遍文章就是给大家详解一个最完整最详细的KVC。</p>
</blockquote>
<h2>KVC在iOS中的定义</h2>
<p>无论是<code>Swift</code>还是<code>Objective-C</code>，KVC的定义都是对<code>NSObject</code>的扩展来实现的(<code>Objective-C</code>中有个显式的<code>NSKeyValueCoding</code>类别名，而Swift没有，也不需要)。所以对于所有继承了<code>NSObject</code>的类型，也就是几乎所有的<code>Objective-C</code>对象都能使用<code>KVC</code>(一些纯<code>Swift</code>类和结构体是不支持KVC的)，下面是KVC最为重要的四个方法</p>
<pre><code>- (nullable id)valueForKey:(NSString *)key;                          //直接通过Key来取值
- (void)setValue:(nullable id)value forKey:(NSString *)key;          //通过Key来设值
- (nullable id)valueForKeyPath:(NSString *)keyPath;                  //通过KeyPath来取值
- (void)setValue:(nullable id)value forKeyPath:(NSString *)keyPath;  //通过KeyPath来设值
</code></pre>
<p>当然NSKeyValueCoding类别中还有其他的一些方法，下面列举一些</p>
<pre><code>+ (BOOL)accessInstanceVariablesDirectly;
//默认返回YES，表示如果没有找到Set&lt;Key&gt;方法的话，会按照_key，_iskey，key，iskey的顺序搜索成员，设置成NO就不这样搜索

- (BOOL)validateValue:(inout id __nullable * __nonnull)ioValue forKey:(NSString *)inKey error:(out NSError **)outError;
//KVC提供属性值正确性�验证的API，它可以用来检查set的值是否正确、为不正确的值做一个替换值或者拒绝设置新值并返回错误原因。

- (NSMutableArray *)mutableArrayValueForKey:(NSString *)key;
//这是集合操作的API，里面还有一系列这样的API，如果属性是一个NSMutableArray，那么可以用这个方法来返回。

- (nullable id)valueForUndefinedKey:(NSString *)key;
//如果Key不存在，且没有KVC无法搜索到任何和Key有关的字段或者属性，则会调用这个方法，默认是抛出异常。

- (void)setValue:(nullable id)value forUndefinedKey:(NSString *)key;
//和上一个方法一样，但这个方法是设值。

- (void)setNilValueForKey:(NSString *)key;
//如果你在SetValue方法时面给Value传nil，则会调用这个方法

- (NSDictionary&lt;NSString *, id&gt; *)dictionaryWithValuesForKeys:(NSArray&lt;NSString *&gt; *)keys;
//输入一组key,返回该组key对应的Value，再转成字典返回，用于将Model转到字典。
</code></pre>
<p>上面的这些方法在碰到特殊情况或者有特殊需求还是会用到的，所以也是可以c了解一下。后面的代码示例会有讲到其中的一些方法。<br>
同时苹果对一些容器类比如<code>NSArray</code>或者<code>NSSet</code>等，KVC有着特殊的实现。建议有基础的或者英文好的开发者直接去看苹果的官方文档，相信你会对KVC的理解更上一个台阶。</p>
<blockquote>
<p>可能有些读者不知道怎么查官方文档，在这里说明一下。打开Xcode，查看最上面的菜单，点最后一个Help -&gt; Documentation and API Reference,然后就可以打开官方文档了。</p>
</blockquote>
<div class="image-package">
<div class="image-container" style="max-width: 700px; max-height: 581px;">
<div class="image-container-fill" style="padding-bottom: 57.19%;"></div>
<div class="image-view" data-width="1016" data-height="581"><img data-original-src="//upload-images.jianshu.io/upload_images/1281203-f07b7b24bafce068.png" data-original-width="1016" data-original-height="581" data-original-format="image/png" data-original-filesize="276268"></div>
</div>
<div class="image-caption">Xcode 官方文档</div>
</div>
<h2>KVC是怎么寻找Key的</h2>
<p>KVC是怎么使用的，我相信绝大多数的开发者都很清楚，我在这里就不再写简单的使用KVC来设值和取值的代码了，首�先我们来探讨KVC在内部是按什么样的顺序来寻找key的。</p>
<h3>设值</h3>
<p>当调用<code>setValue：属性值 forKey：@”name“</code>的代码时，底层的执行机制如下：</p>
<ul>
<li>程序优先调用<code>set&lt;Key&gt;:属性值</code>方法，代码通过<code>setter</code>方法完成设置。<strong>注意，这里的&lt;key&gt;是指成员变量名，首字母大小写要符合KVC的命名规则，下同</strong>
</li>
<li>如果没有找到<code>setName：</code>方法，KVC机制会检查<code>+ (BOOL)accessInstanceVariablesDirectly</code>方法有没有返回YES，默认该方法会返回YES，如果你重写了该方法让其返回NO的话，那么在这一步KVC会执行<code>setValue：forUndefinedKey：</code>方法，不过一般开发者不会这么做。所以KVC机制会搜索该类里面有没有名为<code>_&lt;key&gt;</code>的成员变量，无论该变量是在类接口处定义，还是在类实现处定义，也无论用了什么样的访问修饰符，只在存在以<code>_&lt;key&gt;</code>命名的变量，KVC都可以对该成员变量赋值。</li>
<li>如果该类即没有<code>set&lt;key&gt;：</code>方法，也没有<code>_&lt;key&gt;</code>成员变量，KVC机制会搜索<code>_is&lt;Key&gt;</code>的成员变量。</li>
<li>和上面一样，如果该类即没有<code>set&lt;Key&gt;：</code>方法，也没有<code>_&lt;key&gt;</code>和<code>_is&lt;Key&gt;</code>成员变量，KVC机制再会继续搜索<code>&lt;key&gt;</code>和<code>is&lt;Key&gt;</code>的成员变量。再给它们赋值。</li>
<li>如果上面列出的方法或者成员变量都不存在，系统将会执行该对象的<code>setValue：forUndefinedKey：</code>方法，默认是抛出异常。</li>
</ul>
<p>如果开发者想让这个类禁用KVC里，那么重写<code>+ (BOOL)accessInstanceVariablesDirectly</code>方法让其返回NO即可，这样的话如果KVC没有找到<code>set&lt;Key&gt;:</code>属性名时，会直接用<code>setValue：forUndefinedKey：</code>方法。</p>
<p>下面我们来让代码来测试一下上面的KVC机制</p>
<pre><code>@interface Dog : NSObject
@end
@implementation Dog
{
     NSString* toSetName;
    NSString* isName;
    //NSString* name;
    NSString* _name;
    NSString* _isName;
}
// -(void)setName:(NSString*)name{
//     toSetName = name;
// }
//-(NSString*)getName{
//    return toSetName;
//}
+(BOOL)accessInstanceVariablesDirectly{
    return NO;
}
-(id)valueForUndefinedKey:(NSString *)key{
    NSLog(@"出现异常，该key不存在%@",key);
    return nil;
}
-(void)setValue:(id)value forUndefinedKey:(NSString *)key{
     NSLog(@"出现异常，该key不存在%@",key);
}
@end
int main(int argc, const char * argv[]) {
    @autoreleasepool {
        // insert code here...
        Dog* dog = [Dog new];
        [dog setValue:@"newName" forKey:@"name"];
        NSString* name = [dog valueForKey:@"toSetName"];
        NSLog(@"%@",name);
    }
    return 0;
}
</code></pre>
<p>首先我们先重写<code>accessInstanceVariablesDirectly</code>方法让其返回NO，再运行代码（注意上面注释的部分），Xcode直接打印出</p>
<pre><code>2016-04-15 15:52:12.039 DemoKVC[9681:287627] 出现异常，该key不存在name
2016-04-15 15:52:12.040 DemoKVC[9681:287627] 出现异常，该key不存在toSetName
2016-04-15 15:52:12.040 DemoKVC[9681:287627] (null)
</code></pre>
<p>这说明了重写<code>+(BOOL)accessInstanceVariablesDirectly</code>方法让其返回NO后,KVC找不到<code>setName：</code>方法后，不再去找<code>name</code>系列成员变量，而是直接调用<code>setValue：forUndefinedKey：</code>方法<br>
所以开发者如果不想让自己的类实现KVC，就可以这么做。<br>
下面那两个<code>setter</code>和<code>getter</code>的注释取消掉，再把</p>
<pre><code>NSString* name = [dog valueForKey:@"toSetName"]; 换成 NSString* name = [dog valueForKey:@"name"];
</code></pre>
<p>XCode就可以正确地打印出正确的值了</p>
<pre><code>2016-04-15 15:56:22.130 DemoKVC[9726:289258] newName
</code></pre>
<p>下面再注释掉<code>accessInstanceVariablesDirectly</code>方法，就能测试其他的<code>key</code>查找顺序了，为了节省篇幅，剩下的的KVC对于<code>key</code>寻找机制就不在这里展示了，有兴趣的读者可以写代码去验证。</p>
<h3>取值</h3>
<p>当调用<code>valueForKey：@”name“</code>的代码时，KVC对<code>key</code>的搜索方式不同于<code>setValue：属性值 forKey：@”name“</code>，其搜索方式如下：</p>
<ul>
<li>首先按<code>get&lt;Key&gt;</code>,<code>&lt;key&gt;</code>,<code>is&lt;Key&gt;</code>的顺序方法查找<code>getter</code>方法，找到的话会直接调用。如果是<code>BOOL</code>或者<code>Int</code>等值类型， 会将其包装成一个<code>NSNumber</code>对象。</li>
<li>如果上面的<code>getter</code>没有找到，KVC则会查找<code>countOf&lt;Key&gt;</code>,<code>objectIn&lt;Key&gt;AtIndex</code>或<code>&lt;Key&gt;AtIndexes</code>格式的方法。如果<code>countOf&lt;Key&gt;</code>方法和另外两个方法中的一个被找到，那么就会返回一个可以响应<code>NSArray</code>所�有方法的代理集合(它是<code>NSKeyValueArray</code>，是<code>NSArray</code>的子类)，调用这个代理集合的方法，或者说给这个代理集合发送属于<code>NSArray</code>的方法，就会以<code>countOf&lt;Key&gt;</code>,<code>objectIn&lt;Key&gt;AtIndex</code>�或<code>&lt;Key&gt;AtIndexes</code>这几个方法组合的形式调用。还有一个可选的<code>get&lt;Key&gt;:range:</code>方法。所以你想重新定义KVC的一些功能，你可以添加这些方法，需要注意的是你的方法名要符合KVC的标准命名方法，包括方法签名。</li>
<li>如果上面的方法没有找到，那么会同时查找<code>countOf&lt;Key&gt;</code>，<code>enumeratorOf&lt;Key&gt;</code>,<code>memberOf&lt;Key&gt;</code>格式的方法。如果这三个方法都找到，那么就返回一个可以响应<code>NSSet</code>所的方法的代理集合，和上面一样，给这个代理集合发<code>NSSet</code>的消息，就会以<code>countOf&lt;Key&gt;</code>，<code>enumeratorOf&lt;Key&gt;</code>,<code>memberOf&lt;Key&gt;</code>组合的形式调用。</li>
</ul>
<blockquote>
<p>可能上面的两条查找方案对读者不好理解，简单来说就是如果你在自己的类自定义了KVC的实现，并且实现了上面的方法，那么恭喜你，你可以�将返回的对象当数组(NSArray)用了，详情见下面的示例代码</p>
</blockquote>
<ul>
<li>如果还没有找到，再检查类方法<code>+ (BOOL)accessInstanceVariablesDirectly</code>,如果返回YES(默认行为)，那么和先前的设值一样，会按<code>_&lt;key&gt;,_is&lt;Key&gt;,&lt;key&gt;,is&lt;Key&gt;</code>的顺序搜索成员变量名，这里不推荐这么做，因为这样直接访问实例变量破坏了封装性，使代码更脆弱。如果重写了类方法<code>+ (BOOL)accessInstanceVariablesDirectly</code>返回NO的话，那么会直接调用<code>valueForUndefinedKey:</code>
</li>
<li>还没有找到的话，调用<code>valueForUndefinedKey:</code>
</li>
</ul>
<p>下面再上代码测试</p>
<pre><code>@interface TwoTimesArray : NSObject
-(void)incrementCount;
-(NSUInteger)countOfNumbers;
-(id)objectInNumbersAtIndex:(NSUInteger)index;
@end
@interface TwoTimesArray()
@property (nonatomic,readwrite,assign) NSUInteger count;
@property (nonatomic,copy) NSString* arrName;
@end
@implementation TwoTimesArray
-(void)incrementCount{
    self.count ++;
}
-(NSUInteger)countOfNumbers{
    return self.count;

-(id)objectInNumbersAtIndex:(NSUInteger)index{     //当key使用numbers时，KVC会找到这两个方法。
    return @(index * 2);
}
-(NSInteger)getNum{                 //第一个,自己一个一个注释试
    return 10;
}
-(NSInteger)num{                       //第二个
    return 11;
}
-(NSInteger)isNum{                    //第三个
    return 12;
}
@end


int main(int argc, const char * argv[]) {
    @autoreleasepool {
        TwoTimesArray* arr = [TwoTimesArray new];
        NSNumber* num =   [arr valueForKey:@"num"];
        NSLog(@"%@",num);
        id ar = [arr valueForKey:@"numbers"];
        NSLog(@"%@",NSStringFromClass([ar class]));
         NSLog(@"0:%@     1:%@     2:%@     3:%@",ar[0],ar[1],ar[2],ar[3]);
        [arr incrementCount];                                                                            //count加1
        NSLog(@"%lu",(unsigned long)[ar count]);                                                         //打印出1
        [arr incrementCount];                                                                            //count再加1
        NSLog(@"%lu",(unsigned long)[ar count]);                                                         //打印出2
        
        [arr setValue:@"newName" forKey:@"arrName"];
        NSString* name = [arr valueForKey:@"arrName"];
        NSLog(@"%@",name);
        
    }
    return 0;
}
//打印结果 
2016-04-17 15:39:42.214 KVCDemo[1088:74481] 10
2016-04-17 15:39:42.215 KVCDemo[1088:74481] NSKeyValueArray
2016-04-17 15:41:24.713 KVCDemo[1102:75424] 0:0     1:2     2:4     3:6                 //太明显了，直接调用-(id)objectInNumbersAtIndex:(NSUInteger)index;方法
2016-04-17 15:39:42.215 KVCDemo[1088:74481] 1
2016-04-17 15:39:42.215 KVCDemo[1088:74481] 2
2016-04-17 15:39:42.215 KVCDemo[1088:74481] newName
</code></pre>
<p>很明显，上面的代码充分说明了说明了KVC在调用<code>ValueforKey：@”name“</code>时搜索<code>key</code>的机制。不过还有些功能没有全部列出，有兴趣的读者可以写代码去验证。</p>
<h2>在KVC中使用keyPath</h2>
<p>然而在开发过程中，一个类的成员变量有可能是自定义类或其他的复杂数据类型，你可以先用KVC获取该属性，然后再次用KVC来获取这个自定义类的属性，但这样是比较繁琐的，对此，KVC提供了一个解决方案，那就是键路径<code>keyPath</code>。</p>
<pre><code>- (nullable id)valueForKeyPath:(NSString *)keyPath;                  //通过KeyPath来取值
- (void)setValue:(nullable id)value forKeyPath:(NSString *)keyPath;  //通过KeyPath来设值
</code></pre>
<pre><code>@interface Address : NSObject

@end
@interface Address()
@property (nonatomic,copy)NSString* country;
@end
@implementation Address
@end
@interface People : NSObject
@end
@interface People()
@property (nonatomic,copy) NSString* name;
@property (nonatomic,strong) Address* address;
@property (nonatomic,assign) NSInteger age;
@end
@implementation People
@end
int main(int argc, const char * argv[]) {
    @autoreleasepool {
        People* people1 = [People new];
        Address* add = [Address new];
        add.country = @"China";
        people1.address = add;
        NSString* country1 = people1.address.country;
        NSString * country2 = [people1 valueForKeyPath:@"address.country"];
        NSLog(@"country1:%@   country2:%@",country1,country2);
        [people1 setValue:@"USA" forKeyPath:@"address.country"];
         country1 = people1.address.country;
        country2 = [people1 valueForKeyPath:@"address.country"];
        NSLog(@"country1:%@   country2:%@",country1,country2);
    }
    return 0;
}
//打印结果 
2016-04-17 15:55:22.487 KVCDemo[1190:82636] country1:China   country2:China
2016-04-17 15:55:22.489 KVCDemo[1190:82636] country1:USA   country2:USA
</code></pre>
<p>上面的代码简单在展示了<code>keyPath</code>是怎么用的。如果你不小心错误的使用了<code>key</code>而非<code>keyPath</code>的话，比如上面的代码中KVC会直接查找<code>address.country</code>这个属性，很明显，这个属性并不存在，所以会再调用<code>undefinedKey</code>相关方法。而KVC对于<code>keyPath</code>是搜索机制第一步就是分离<code>key</code>，用小数点<code>.</code>来分割<code>key</code>，然后再像普通<code>key</code>一样按照先前介绍的顺序搜索下去。</p>
<h2>KVC如何处理异常</h2>
<p>KVC中最常见的异常就是不小心使用了错误的<code>key</code>，或者在设值中不小心传递了<code>nil</code>的值，KVC中有专门的方法来处理这些异常。</p>
<p>通常在用KVC操作Model时，抛出异常的那两个方法是需要重写的。虽然一般很小出现传递了错误的Key值这种情况，但是如果不小心出现了，直接抛出异常让APP崩溃显然是不合理的。一般在这里直接让这个<code>key</code>打印出来即可，或者有些特殊情况需要特殊处理。通常情况下，KVC不允许你要在调用<code>setValue：属性值 forKey：@”name“</code>(或者keyPath)时<strong>对非对象</strong>传递一个<code>nil</code>的值。很简单，因为值类型是不能为<code>nil</code>的。如果你不小心传了，KVC会调用<code>setNilValueForKey:</code>方法。这个方法默认是抛出异常，所以一般而言最好还是重写这个方法。</p>
<pre><code>  [people1 setValue:nil forKey:@"age"]
   *** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '[&lt;People 0x100200080&gt; setNilValueForKey]: could not set nil as the value for the key age.' // 调用setNilValueForKey抛出异常

</code></pre>
<p>如果重写<code>setNilValueForKey:</code>就没问题了</p>
<pre><code>@implementation People

-(void)setNilValueForKey:(NSString *)key{
    NSLog(@"不能将%@设成nil",key);
}

@end
//打印出
2016-04-17 16:19:55.298 KVCDemo[1304:92472] 不能将age设成nil

</code></pre>
<h2>KVC处理非对象和自定义对象</h2>
<p>不是每一个方法都返回对象，但是<code>valueForKey：</code>总是返回一个id对象，如果原本的变量类型是值类型或者结构体，返回值会封装成<code>NSNumber</code>或者<code>NSValue</code>对象。这两个类会处理从数字，布尔值到指针和结构体任何类型。然后开以者需要手动转换成原来的类型。尽管<code>valueForKey：</code>会自动将值类型封装成对象，但是<code>setValue：forKey：</code>却不行。你必须手动将值类型转换成<code>NSNumber</code>或者<code>NSValue</code>类型，才能传递过去。</p>
<p>对于自定义对象，KVC也会正确地设值和取值。因为传递进去和取出来的都是<code>id</code>类型，所以需要开发者自己担保类型的正确性，运行时<code>Objective-C</code>在发送消息的会检查类型，如果错误会直接抛出异常。</p>
<pre><code>Address* add2 = [Address new];
add2.country = @"England";
[people1 setValue:add2 forKey:@"address"];
NSString* country1 = people1.address.country;
NSString * country2 = [people1 valueForKeyPath:@"address.country"];
NSLog(@"country1:%@   country2:%@",country1,country2);
//打印结果
2016-04-17 16:29:36.349 KVCDemo[1346:95910] country1:England   country2:England

</code></pre>
<h2>KVC与容器类</h2>
<p>对象的属性可以是一对一的，也可以是一对多的。一对多的属性要么是有序的(数组)，要么是无序的(集合)。</p>
<p>不可变的有序容器属性(<code>NSArray</code>)和无序容器属性(<code>NSSet</code>)一般可以使用<code>valueForKey:</code>来获取。比如有一个叫<code>items</code>的<code>NSArray</code>属性，你可以用<code>valurForKey:@"items"</code>来获取这个属性。前面<code>valueForKey:</code>的<code>key</code>搜索模式中，我们发现其实KVC使用了一种更灵活的方式来管理容器类。苹果的官方文档也推荐我们实现这些这些特殊的访问器。</p>
<p>而当对象的属性是可变的容器时，对于有序的容器，可以用下面的方法：</p>
<pre><code>- (NSMutableArray *)mutableArrayValueForKey:(NSString *)key;
</code></pre>
<p>该方法返回一个可变有序数组，如果调用该方法，KVC的搜索顺序如下</p>
<ul>
<li>搜索<code>insertObject:in&lt;Key&gt;AtIndex:</code> , <code>removeObjectFrom&lt;Key&gt;AtIndex:</code> 或者 <code>insert&lt;Key&gt;AdIndexes</code> , <code>remove&lt;Key&gt;AtIndexes</code> 格式的方法<br>
如果至少找到一个<code>insert</code>方法和一个<code>remove</code>方法，那么同样返回一个可以响应<code>NSMutableArray</code>所有方法代理集合(类名是<code>NSKeyValueFastMutableArray2</code>)，那么给这个代理集合发送<code>NSMutableArray</code>的方法，以<code>insertObject:in&lt;Key&gt;AtIndex:</code> , <code>removeObjectFrom&lt;Key&gt;AtIndex:</code> 或者 <code>insert&lt;Key&gt;AdIndexes</code> , <code>remove&lt;Key&gt;AtIndexes</code>组合的形式调用。还有两个可选实现的接口：<code>replaceOnjectAtIndex:withObject:</code>,<code>replace&lt;Key&gt;AtIndexes:with&lt;Key&gt;:</code>。</li>
<li>如果上步的方法没有找到，则搜索<code>set&lt;Key&gt;:</code> 格式的方法，如果找到，那么发送给代理集合的<code>NSMutableArray</code>最终都会调用<code>set&lt;Key&gt;:</code>方法。 也就是说，<code>mutableArrayValueForKey:</code>取出的代理集合修改后，用<code>set&lt;Key&gt;:</code> 重新赋值回去去。这样做效率会低很多。所以推荐实现上面的方法。</li>
<li>如果上一步的方法还还没有找到，再检查类方法<code>+ (BOOL)accessInstanceVariablesDirectly</code>,如果返回YES(默认行为)，会按<code>_&lt;key&gt;</code>,<code>&lt;key&gt;</code>,的顺序搜索成员变量名，如果找到，那么发送的<code>NSMutableArray</code>消息方法直接交给这个成员变量处理。</li>
<li>如果还是找不到，则调用<code>valueForUndefinedKey:</code>。</li>
<li>关于<code>mutableArrayValueForKey:</code>的适用场景，我在网上找了很多，发现其一般是用在对<code>NSMutableArray</code>添加Observer上。如果对象属性是个<code>NSMutableArray、NSMutableSet、NSMutableDictionary</code>等集合类型时，你给它添加KVO时，你会发现当你添加或者移除元素时并不能接收到变化。因为KVO的本质是系统监测到某个属性的内存地址或常量改变时，会添加上<code>- (void)willChangeValueForKey:(NSString *)key</code>和<code>- (void)didChangeValueForKey:(NSString *)key</code>方法来发送通知，所以一种解决方法是手动调用者两个方法，但是并不推荐，你永远无法像系统一样真正知道这个元素什么时候被改变。另一种便是利用使用<code>mutableArrayValueForKey:</code>了。</li>
</ul>
<pre><code>@interface demo : NSObject
@property (nonatomic,strong) NSMutableArray* arr;
@end
@implementation demo
-(id)init{
    if (self == [super init]){
        _arr = [NSMutableArray new];
        [self addObserver:self forKeyPath:@"arr" options:NSKeyValueObservingOptionNew|NSKeyValueObservingOptionOld context:nil];
    }
    return self;
}
-(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSString *,id&gt; *)change context:(void *)context{
    NSLog(@"%@",change);
}
-(void)dealloc{
    [self removeObserver:self forKeyPath:@"arr"]; //一定要在dealloc里面移除观察
}
-(void)addItem{
    [_arr addObject:@"1"];
}
-(void)addItemObserver{
    [[self mutableArrayValueForKey:@"arr"] addObject:@"1"];
}
-(void)removeItemObserver{
    [[self mutableArrayValueForKey:@"arr"] removeLastObject];
}
@end
然后再:
demo* d = [demo new];
[d addItem];
[d addItemObserver];
[d removeItemObserver];
        
打印结果
2016-04-18 17:48:22.675 KVCDemo[32647:505864] {
    indexes = "&lt;_NSCachedIndexSet: 0x100202c70&gt;[number of indexes: 1 (in 1 ranges), indexes: (1)]";
    kind = 2;
    new =     (
        1
    );
}
2016-04-18 17:48:22.677 KVCDemo[32647:505864] {
    indexes = "&lt;_NSCachedIndexSet: 0x100202c70&gt;[number of indexes: 1 (in 1 ranges), indexes: (1)]";
    kind = 3;
    old =     (
        1
    );
}
</code></pre>
<p>从上面的代码可以看出，当只是普通地调用<code>[_arr addObject:@"1"]</code>时，<code>Observer</code>并不会回调，只有<code>[[self mutableArrayValueForKey:@"arr"] addObject:@"1"]</code>;这样写时才能正确地触发KVO。打印出来的数据中，可以看出这次操作的详情，<code>kind</code>可能是指操作方法(我还不是很确认)，<code>old</code>和<code>new</code>并不是成对出现的，当加添新数据时是<code>new</code>，删除数据时是<code>old</code></p>
<p>而对于无序的容器，可以用下面的方法：</p>
<pre><code>- (NSMutableSet *)mutableSetValueForKey:(NSString *)key;
</code></pre>
<p>该方法返回一个可变的无序数组如果调用该方法，KVC的搜索顺序如下</p>
<ul>
<li>搜索<code>addObject&lt;Key&gt;Object:</code> , <code>remove&lt;Key&gt;Object:</code> 或者 <code>add&lt;Key&gt;</code> , <code>remove&lt;Key&gt;</code> 格式的方法<br>
如果至少找到一个<code>insert</code>方法和一个<code>remove</code>方法，那么同样返回一个可以响应<code>NSMutableSet</code>所有方法代理集合(类名是<code>NSKeyValueFastMutableSet2</code>)，那么给这个代理集合发送<code>NSMutableSet</code>的方法，以<code>addObject&lt;Key&gt;Object:</code> , <code>remove&lt;Key&gt;Object:</code> 或者 <code>add&lt;Key&gt;</code> , <code>remove&lt;Key&gt;</code>组合的形式调用。还有两个可选实现的接口：<code>intersect&lt;Key&gt; , set&lt;Key&gt;:</code> 。</li>
<li>如果<code>receiver</code>是<code>ManagedObject</code>，那么就不会继续搜索。</li>
<li>如果上一步的方法没有找到，则搜索<code>set&lt;Key&gt;</code>: 格式的方法，如果找到，那么发送给代理集合的<code>NSMutableSet</code>最终都会调用<code>set&lt;Key&gt;:</code>方法。 也就是说，<code>mutableSetValueForKey</code>取出的代理集合修改后，用<code>set&lt;Key&gt;:</code> 重新赋值回去去。这样做效率会低很多。所以推荐实现上面的方法。</li>
<li>如果上一步的方法还没有找到，再检查类方法<code>+ (BOOL)accessInstanceVariablesDirectly</code>,如果返回<code>YES</code>(默认行为)，会按<code>_&lt;key&gt;</code>,<code>&lt;key&gt;</code>的顺序搜索成员变量名，如果找到，那么发送的<code>NSMutableSet</code>消息方法直接交给这个成员变量处理。</li>
<li>如果还是找不到，调用<code>valueForUndefinedKey:</code><br>
可见，除了检查<code>receiver</code>是<code>ManagedObject</code>以外，其搜索顺序和<code>mutableArrayValueForKey</code>基本一至，</li>
</ul>
<p>同样，它们也有对应的<code>keyPath</code>版本</p>
<pre><code>- (NSMutableArray *)mutableArrayValueForKeyPath:(NSString *)keyPath;
- (NSMutableSet *)mutableSetValueForKeyPath:(NSString *)keyPath;
</code></pre>
<p>iOS5和OSX10.7以后还有个<code>mutableOrdered</code>版本</p>
<pre><code>- (NSMutableOrderedSet *)mutableOrderedSetValueForKey:(NSString *)key
</code></pre>
<p>这两种KVC的用法我还不是清楚，目前只能找到用于KVO的例子。如果有读者能在项目中用到，希望可以告诉我。</p>
<h2>KVC和字典</h2>
<p>当对<code>NSDictionary</code>对象使用KVC时，<code>valueForKey:</code>的表现行为和<code>objectForKey:</code>一样。所以使用<code>valueForKeyPath:</code>用来访问多层嵌套的字典是比较方便的。</p>
<p>KVC里面还有两个关于NSDictionary的方法</p>
<pre><code>- (NSDictionary&lt;NSString *, id&gt; *)dictionaryWithValuesForKeys:(NSArray&lt;NSString *&gt; *)keys;
- (void)setValuesForKeysWithDictionary:(NSDictionary&lt;NSString *, id&gt; *)keyedValues;
</code></pre>
<p><code>dictionaryWithValuesForKeys:</code>是指输入一组<code>key</code>，返回这组<code>key</code>对应的属性，再组成一个字典。<br>
<code>setValuesForKeysWithDictionary</code>是用来修改Model中对应<code>key</code>的属性。下面直接用代码会更直观一点</p>
<pre><code>Address* add = [Address new];
add.country = @"China";
add.province = @"Guang Dong";
add.city = @"Shen Zhen";
add.district = @"Nan Shan";
NSArray* arr = @[@"country",@"province",@"city",@"district"];
NSDictionary* dict = [add dictionaryWithValuesForKeys:arr]; //把对应key所有的属性全部取出来
NSLog(@"%@",dict);

NSDictionary* modifyDict = @{@"country":@"USA",@"province":@"california",@"city":@"Los angle"};
[add setValuesForKeysWithDictionary:modifyDict];            //用key Value来修改Model的属性
NSLog(@"country:%@  province:%@ city:%@",add.country,add.province,add.city);

//打印结果
2016-04-19 11:54:30.846 KVCDemo[6607:198900] {
    city = "Shen Zhen";
    country = China;
    district = "Nan Shan";
    province = "Guang Dong";
}
2016-04-19 11:54:30.847 KVCDemo[6607:198900] country:USA  province:california city:Los angle
</code></pre>
<p>打印出来的结果完全符合预期。</p>
<h2>KVC的内部实现机制</h2>
<p>前面我们对析了KVC是怎么搜索<code>key</code>的。所以如果明白了<code>key</code>的搜索顺序，是可以自己写代码实现KVC的。在考虑到集合和<code>keyPath</code>的情况下，KVC的实现会比较复杂，我们只写代码实现最普通的取值和设值即可。</p>
<pre><code>@interface NSObject(MYKVC)
-(void)setMyValue:(id)value forKey:(NSString*)key;
-(id)myValueforKey:(NSString*)key;

@end
@implementation NSObject(MYKVC)
-(void)setMyValue:(id)value forKey:(NSString *)key{
    if (key == nil || key.length == 0) {  //key名要合法
        return;
    }
    if ([value isKindOfClass:[NSNull class]]) {
        [self setNilValueForKey:key]; //如果需要完全自定义，那么这里需要写一个setMyNilValueForKey，但是必要性不是很大，就省略了
        return;
    }
    if (![value isKindOfClass:[NSObject class]]) {
        @throw @"must be s NSObject type";
        return;
    }

    NSString* funcName = [NSString stringWithFormat:@"set%@:",key.capitalizedString];
    if ([self respondsToSelector:NSSelectorFromString(funcName)]) {  //默认优先调用set方法
        [self performSelector:NSSelectorFromString(funcName) withObject:value];
        return;
    }
    unsigned int count;
    BOOL flag = false;
    Ivar* vars = class_copyIvarList([self class], &amp;count);
    for (NSInteger i = 0; i&lt;count; i++) {
        Ivar var = vars[i];
        NSString* keyName = [[NSString stringWithCString:ivar_getName(var) encoding:NSUTF8StringEncoding] substringFromIndex:1];
        
        if ([keyName isEqualToString:[NSString stringWithFormat:@"_%@",key]]) {
            flag = true;
            object_setIvar(self, var, value);
            break;
        }
        
        
        if ([keyName isEqualToString:key]) {
            flag = true;
            object_setIvar(self, var, value);
            break;
        }
    }
    if (!flag) {
        [self setValue:value forUndefinedKey:key];//如果需要完全自定义，那么这里需要写一个self setMyValue:value forUndefinedKey:key，但是必要性不是很大，就省略了
    }
}

-(id)myValueforKey:(NSString *)key{
    if (key == nil || key.length == 0) {
        return [NSNull new]; //其实不能这么写的
    }
    //这里为了更方便，我就不做相关集合的方法查询了
    NSString* funcName = [NSString stringWithFormat:@"gett%@:",key.capitalizedString];
    if ([self respondsToSelector:NSSelectorFromString(funcName)]) {
       return [self performSelector:NSSelectorFromString(funcName)];
    }

    unsigned int count;
    BOOL flag = false;
    Ivar* vars = class_copyIvarList([self class], &amp;count);
    for (NSInteger i = 0; i&lt;count; i++) {
        Ivar var = vars[i];
        NSString* keyName = [[NSString stringWithCString:ivar_getName(var) encoding:NSUTF8StringEncoding] substringFromIndex:1];
        if ([keyName isEqualToString:[NSString stringWithFormat:@"_%@",key]]) {
            flag = true;
            return     object_getIvar(self, var);
            break;
        }
        if ([keyName isEqualToString:key]) {
            flag = true;
            return     object_getIvar(self, var);
            break;
        }
    }
    if (!flag) {
        [self valueForUndefinedKey:key];//如果需要完全自定义，那么这里需要写一个self myValueForUndefinedKey，但是必要性不是很大，就省略了
    }
   return [NSNull new]; //其实不能这么写的
}
@end


Address* add = [Address new];
add.country = @"China";
add.province = @"Guang Dong";
add.city = @"Shen Zhen";
add.district = @"Nan Shan";

[add setMyValue:nil forKey:@"area"];            //测试设置 nil value
[add setMyValue:@"UK" forKey:@"country"];
[add setMyValue:@"South" forKey:@"area"];
[add setMyValue:@"300169" forKey:@"postCode"];
NSLog(@"country:%@  province:%@ city:%@ postCode:%@",add.country,add.province,add.city,add._postCode);
NSString* postCode = [add myValueforKey:@"postCode"];
NSString* country = [add myValueforKey:@"country"];
NSLog(@"country:%@ postCode: %@",country,postCode);

//打印结果：

2016-04-19 14:29:39.498 KVCDemo[7273:275129] country:UK  province:South city:Shen Zhen postCode:300169
2016-04-19 14:29:39.499 KVCDemo[7273:275129] country:UK postCode: 300169

</code></pre>
<p>上面就是自己写代码实现KVC的部分功能。其中我省略了自定义KVC错误方法，省略了部分KVC搜索<code>key</code>的步骤，但是逻辑是很清晰明了的，后面的测试也符合预期。当然这只是我自己实现KVC的思路，Apple也许并不是这么做的。</p>
<h2>KVC的正确性验证</h2>
<p>KVC提供了属性值,用来验证key对应的Value是否可用的方法</p>
<pre><code>- (BOOL)validateValue:(inout id __nullable * __nonnull)ioValue forKey:(NSString *)inKey error:(out NSError **)outError;
</code></pre>
<p>这个方法的默认实现是去探索类里面是否有一个这样的方法：<code>-(BOOL)validate&lt;Key&gt;:error:</code>如果有这个方法，就调用这个方法来返回，没有的话就直接返回<code>YES</code></p>
<pre><code>@implementation Address
-(BOOL)validateCountry:(id *)value error:(out NSError * _Nullable __autoreleasing *)outError{  //在implementation里面加这个方法，它会验证是否设了非法的value
    NSString* country = *value;
    country = country.capitalizedString;
    if ([country isEqualToString:@"Japan"]) {
        return NO;                                                                             //如果国家是日本，就返回NO，这里省略了错误提示，
    }
    return YES;
}
@end
NSError* error;
id value = @"japan";
NSString* key = @"country";
BOOL result = [add validateValue:&amp;value forKey:key error:&amp;error]; //如果没有重写-(BOOL)-validate&lt;Key&gt;:error:，默认返回Yes
if (result) {
    NSLog(@"键值匹配");
    [add setValue:value forKey:key];
}
else{
    NSLog(@"键值不匹配"); //不能设为日本，基他国家都行
}
NSString* country = [add valueForKey:@"country"];
NSLog(@"country:%@",country);
//打印结果 
2016-04-20 14:55:12.055 KVCDemo[867:58871] 键值不匹配
2016-04-20 14:55:12.056 KVCDemo[867:58871] country:China
</code></pre>
<p>如上面的代码，当开发者需要验证能不能用KVC设定某个值时，可以调用<code>validateValue: forKey:</code>这个方法来验证，如果这个类的开发者实现了<code>-(BOOL)validate&lt;Key&gt;:error:</code>这个方法，那么KVC就会直接调用这个方法来返回，如果没有，就直接返回<code>YES</code>，注意，KVC在设值时不会主动去做验证，需要开发者手动去验证。所以即使你在类里面写了验证方法，但是KVC因为不会去主动验证，所以还是能够设值成功。</p>
<h2>KVC的使用</h2>
<p>KVC在iOS开发中是绝不可少的利器，这种基于运行时的编程方式极大地提高了灵活性，简化了代码，甚至实现很多难以想像的功能，KVC也是许多iOS开发黑魔法的基础。下面我来列举iOS开发中KVC的使用场景</p>
<h4>动态地取值和设值</h4>
<p>利用KVC动态的取值和设值是最基本的用途了。相信每一个iOS开发者都能熟练掌握，</p>
<h4>用KVC来访问和修改私有变量</h4>
<p>对于类里的私有属性，Objective-C是无法直接访问的，但是KVC是可以的，请参考本文前面的Dog类的例子。</p>
<h4>Model和字典转换</h4>
<p>这是KVC强大作用的又一次体现，请参考我写的<a href="https://www.jianshu.com/p/53b1e5785b24" target="_blank">iOS开发技巧系列---打造强大的BaseMod系列文章</a>，里面<br>
充分地运用了KVC和Objc的<code>runtime</code>组合的技巧，只用了短短数行代码就是完成了很多功能。</p>
<h4>修改一些控件的内部属性</h4>
<p>这也是iOS开发中必不可少的小技巧。众所周知很多UI控件都由很多内部UI控件组合而成的，但是Apple度没有提供这访问这些控件的API，这样我们就无法正常地访问和修改这些控件的样式。而KVC在大多数情况可下可以解决这个问题。最常用的就是个性化UITextField中的placeHolderText了。下面演示如果修改placeHolder的文字样式。这里的关键点是如果获取你要修改的样式的属性名，也就是key或者keyPath名。</p>
<br>
<div class="image-package">
<div class="image-container" style="max-width: 700px; max-height: 318px;">
<div class="image-container-fill" style="padding-bottom: 35.18%;"></div>
<div class="image-view" data-width="904" data-height="318"><img data-original-src="//upload-images.jianshu.io/upload_images/1281203-58710faea20a803e.png" data-original-width="904" data-original-height="318" data-original-format="image/png" data-original-filesize="56149"></div>
</div>
<div class="image-caption">修改placeHolder的样式</div>
</div>
<p>一般情况下可以运用<code>runtime</code>来获取Apple不想开放的属性名</p>
<pre><code>let count:UnsafeMutablePointer&lt;UInt32&gt; =  UnsafeMutablePointer&lt;UInt32&gt;()
var properties = class_copyIvarList(UITextField.self, count)
while properties.memory.debugDescription !=  "0x0000000000000000"{
    let t = ivar_getName(properties.memory)
    let n = NSString(CString: t, encoding: NSUTF8StringEncoding)
    print(n)                                                         //打印出所有属性，这里我用了Swift语言
    properties = properties.successor()
}

//上面省略了部分属性
Optional(_disabledBackgroundView)
Optional(_systemBackgroundView)
Optional(_floatingContentView)
Optional(_contentBackdropView)
Optional(_fieldEditorBackgroundView)
Optional(_fieldEditorEffectView)
Optional(_displayLabel)
Optional(_placeholderLabel)                                         //这个正是我想要修改的属性。
Optional(_dictationLabel)
Optional(_suffixLabel)
Optional(_prefixLabel)
Optional(_iconView)
//下面省略了部分属性

</code></pre>
<p>可以从里面看到其他还有很多东西可以修改，运用KVC设值可以获得自己想要的效果。</p>
<h4>操作集合</h4>
<p>Apple对KVC的<code>valueForKey:</code>方法作了一些特殊的实现，比如说<code>NSArray</code>和<code>NSSet</code>这样的容器类就实现了这些方法。所以可以用KVC很方便地操作集合</p>
<h5>用KVC实现高阶消息传递</h5>
<p>当对容器类使用KVC时，<code>valueForKey:</code>将会被传递给容器中的每一个对象，而不是容器本身进行操作。结果会被添加进返回的容器中，这样，开发者可以很方便的操作集合来返回另一个集合。</p>
<pre><code>NSArray* arrStr = @[@"english",@"franch",@"chinese"];
NSArray* arrCapStr = [arrStr valueForKey:@"capitalizedString"];
for (NSString* str  in arrCapStr) {
    NSLog(@"%@",str);
}
NSArray* arrCapStrLength = [arrStr valueForKeyPath:@"capitalizedString.length"];
for (NSNumber* length  in arrCapStrLength) {
    NSLog(@"%ld",(long)length.integerValue);
}
打印结果
2016-04-20 16:29:14.239 KVCDemo[1356:118667] English
2016-04-20 16:29:14.240 KVCDemo[1356:118667] Franch
2016-04-20 16:29:14.240 KVCDemo[1356:118667] Chinese
2016-04-20 16:29:14.240 KVCDemo[1356:118667] 7
2016-04-20 16:29:14.241 KVCDemo[1356:118667] 6
2016-04-20 16:29:14.241 KVCDemo[1356:118667] 7
</code></pre>
<p>方法<code>capitalizedString</code>被传递到NSArray中的每一项，这样，NSArray的每一员都会执行<code>capitalizedString</code>并返回一个包含结果的新的NSArray。从打印结果可以看出，所有<code>String</code>都成功以转成了大写。<br>
同样如果要执行多个方法也可以用<code>valueForKeyPath:</code>方法。它先会对每一个成员调用 <code>capitalizedString</code>方法，然后再调用<code>length</code>，因为<code>lenth</code>方法返回是一个数字，所以返回结果以<code>NSNumber</code>的形式保存在新数组里。</p>
<h5>用KVC中的函数操作集合</h5>
<p>KVC同时还提供了很复杂的函数，主要有下面这些<br>
①简单集合运算符<br>
简单集合运算符共有<code>@avg， @count ， @max ， @min ，@sum5</code>种，都表示啥不用我说了吧， 目前还不支持自定义。</p>
<pre><code>@interface Book : NSObject
@property (nonatomic,copy)  NSString* name;
@property (nonatomic,assign)  CGFloat price;
@end
@implementation Book
@end


Book *book1 = [Book new];
book1.name = @"The Great Gastby";
book1.price = 22;
Book *book2 = [Book new];
book2.name = @"Time History";
book2.price = 12;
Book *book3 = [Book new];
book3.name = @"Wrong Hole";
book3.price = 111;

Book *book4 = [Book new];
book4.name = @"Wrong Hole";
book4.price = 111;

NSArray* arrBooks = @[book1,book2,book3,book4];
NSNumber* sum = [arrBooks valueForKeyPath:@"@sum.price"];
NSLog(@"sum:%f",sum.floatValue);
NSNumber* avg = [arrBooks valueForKeyPath:@"@avg.price"];
NSLog(@"avg:%f",avg.floatValue);
NSNumber* count = [arrBooks valueForKeyPath:@"@count"];
NSLog(@"count:%f",count.floatValue);
NSNumber* min = [arrBooks valueForKeyPath:@"@min.price"];
NSLog(@"min:%f",min.floatValue);
NSNumber* max = [arrBooks valueForKeyPath:@"@max.price"];
NSLog(@"max:%f",max.floatValue);

打印结果
2016-04-20 16:45:54.696 KVCDemo[1484:127089] sum:256.000000
2016-04-20 16:45:54.697 KVCDemo[1484:127089] avg:64.000000
2016-04-20 16:45:54.697 KVCDemo[1484:127089] count:4.000000
2016-04-20 16:45:54.697 KVCDemo[1484:127089] min:12.000000
2016-04-20 16:45:54.697 KVCDemo[1484:127089] max:111.000000

</code></pre>
<p>②对象运算符<br>
比集合运算符稍微复杂，能以数组的方式返回指定的内容，一共有两种：<br>
<code>@distinctUnionOfObjects</code><br>
<code>@unionOfObjects</code><br>
它们的返回值都是NSArray，区别是前者返回的元素都是唯一的，是去重以后的结果；后者返回的元素是全集。<br>
用法如下：</p>
<pre><code>NSLog(@"distinctUnionOfObjects");
NSArray* arrDistinct = [arrBooks valueForKeyPath:@"@distinctUnionOfObjects.price"];
for (NSNumber *price in arrDistinct) {
    NSLog(@"%f",price.floatValue);
}
NSLog(@"unionOfObjects");
NSArray* arrUnion = [arrBooks valueForKeyPath:@"@unionOfObjects.price"];
for (NSNumber *price in arrUnion) {
    NSLog(@"%f",price.floatValue);
}
        
2016-04-20 16:47:34.490 KVCDemo[1522:128840] distinctUnionOfObjects
2016-04-20 16:47:34.490 KVCDemo[1522:128840] 111.000000
2016-04-20 16:47:34.490 KVCDemo[1522:128840] 12.000000
2016-04-20 16:47:34.490 KVCDemo[1522:128840] 22.000000
2016-04-20 16:47:34.490 KVCDemo[1522:128840] unionOfObjects
2016-04-20 16:47:34.490 KVCDemo[1522:128840] 22.000000
2016-04-20 16:47:34.490 KVCDemo[1522:128840] 12.000000
2016-04-20 16:47:34.490 KVCDemo[1522:128840] 111.000000
2016-04-20 16:47:34.490 KVCDemo[1522:128840] 111.000000
</code></pre>
<p>前者会将重复的价格去除后返回所有价格，后者直接返回所有的图书价格。(因为只返回价格，没有返回图书，感觉用处不大。)<br>
③Array和Set操作符<br>
这种情况更复杂了，说的是集合中包含集合的情况，我们执行了如下的一段代码：<br>
@distinctUnionOfArrays<br>
@unionOfArrays<br>
@distinctUnionOfSets<br>
<code>@distinctUnionOfArrays：</code>该操作会返回一个数组，这个数组包含不同的对象，不同的对象是在从关键路径到操作器右边的被指定的属性里<br>
<code>@unionOfArrays</code> 该操作会返回一个数组，这个数组包含的对象是在从关键路径到操作器右边的被指定的属性里和@distinctUnionOfArrays不一样，重复的对象不会被移除<br>
<code>@distinctUnionOfSets</code> 和<code>@distinctUnionOfArrays</code>类似。因为<code>Set</code>本身就不支持重复。</p>
<h4>KVO</h4>
<p>你没看错，KVO是基于KVC实现的。那么是怎么用KVC实现KVO的呢，<del>请期待下章</del>。</p>
<h2>总结</h2>
<p>本文全方位介绍了KVC的原理和各种用法。相信读者看完后对会KVC会有更完全的理解，也会在项目里更好的运用KVC。其实这里面所有的东西在官方文档里都有详细的讲解说明。只不过全是英文的，我也看过几遍，但是英语不好会看得很吃力，比如官方在介绍@distinctUnionOfArrays时的那句话我想了很好久也不是很明白，而且官方的示例代码也做得不够好，所以很难找出某些功能的适用场景。但我还是推荐各位开发者能够学好英语去看官方文档。再结合StackOverFlow和Google。真的可以解决绝大多数开发中碰到的难题了。这篇文章就到这里，<del>下篇我向大家介绍KVO</del>。 现在网上KVO的文章非常多，质量也不错，读者可以搜索阅读。</p>

          </div>
        </div>
    </div>

    <!-- 如果是付费文章，未购买，则显示购买按钮 -->

    <!-- 连载目录项 -->

    <!-- 如果是付费文章 -->
      <!-- 如果是付费连载，已购买，且作者允许赞赏，则显示付费信息和赞赏 -->
        <div data-vcomp="free-reward-panel"></div>

      <div class="show-foot">
        <a class="notebook" href="/nb/2609834">
          <i class="iconfont ic-search-notebook"></i>
          <span>日记本</span>
</a>        <div class="copyright" data-toggle="tooltip" data-html="true" data-original-title="转载请联系作者获得授权，并标注“简书作者”。">
          © 著作权归作者所有
        </div>
        <div class="modal-wrap" data-report-note>
          <a id="report-modal">举报文章</a>
        </div>
      </div>

      <!-- 文章底部作者信息 -->
        <div class="follow-detail">
          <div class="info">
            <a class="avatar" href="/u/ba6dc2f48796">
              <img src="//upload.jianshu.io/users/upload_avatars/1281203/e0d85576e91a?imageMogr2/auto-orient/strip|imageView2/1/w/96/h/96" alt="96" />
</a>            <div props-data-classes="user-follow-button-footer" data-author-follow-button></div>
            <a class="title" href="/u/ba6dc2f48796">黑暗中的孤影</a>
          </div>
        </div>

    <div class="meta-bottom">
      <div class="btn like-group"></div>
      <div class="share-group">
        <a class="share-circle" data-action="weixin-share" data-toggle="tooltip" data-original-title="分享到微信">
          <i class="iconfont ic-wechat"></i>
        </a>
        <a class="share-circle" data-action="weibo-share" data-toggle="tooltip" href="javascript:void((function(s,d,e,r,l,p,t,z,c){var%20f=&#39;http://v.t.sina.com.cn/share/share.php?appkey=1881139527&#39;,u=z||d.location,p=[&#39;&amp;url=&#39;,e(u),&#39;&amp;title=&#39;,e(t||d.title),&#39;&amp;source=&#39;,e(r),&#39;&amp;sourceUrl=&#39;,e(l),&#39;&amp;content=&#39;,c||&#39;gb2312&#39;,&#39;&amp;pic=&#39;,e(p||&#39;&#39;)].join(&#39;&#39;);function%20a(){if(!window.open([f,p].join(&#39;&#39;),&#39;mb&#39;,[&#39;toolbar=0,status=0,resizable=1,width=440,height=430,left=&#39;,(s.width-440)/2,&#39;,top=&#39;,(s.height-430)/2].join(&#39;&#39;)))u.href=[f,p].join(&#39;&#39;);};if(/Firefox/.test(navigator.userAgent))setTimeout(a,0);else%20a();})(screen,document,encodeURIComponent,&#39;&#39;,&#39;&#39;,&#39;&#39;, &#39;推荐 黑暗中的孤影 的文章《iOS开发技巧系列---详解KVC(我告诉你KVC的一切)》（ 分享自 @简书 ）&#39;,&#39;https://www.jianshu.com/p/45cbd324ea65?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=weibo&#39;,&#39;页面编码gb2312|utf-8默认gb2312&#39;));" data-original-title="分享到微博">
          <i class="iconfont ic-weibo"></i>
        </a>
        <a class="share-circle" data-toggle="tooltip"  id="longshare" target="_blank">
            <div class="qrcode" id="qrcode">
             <img src="//cdn2.jianshu.io/assets/web/download-index-side-qrcode-cb13fc9106a478795f8d10f9f632fccf.png" alt="Download index side qrcode" />
             <p>下载app生成长微博图片</p>
             </div>
          <i class="iconfont ic-picture"></i>
        </a>
        <a class="share-circle more-share" tabindex="0" data-toggle="popover" data-placement="top" data-html="true" data-trigger="focus" href="javascript:void(0);" data-content='
          <ul class="share-list">
            <li><a href="javascript:void(function(){var d=document,e=encodeURIComponent,r=&#39;http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?url=&#39;+e(&#39;https://www.jianshu.com/p/45cbd324ea65?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=qzone&#39;)+&#39;&amp;title=&#39;+e(&#39;推荐 黑暗中的孤影 的文章《iOS开发技巧系列---详解KVC(我告诉你KVC的一切)》&#39;),x=function(){if(!window.open(r,&#39;qzone&#39;,&#39;toolbar=0,resizable=1,scrollbars=yes,status=1,width=600,height=600&#39;))location.href=r};if(/Firefox/.test(navigator.userAgent)){setTimeout(x,0)}else{x()}})();"><i class="social-icon-sprite social-icon-zone"></i><span>分享到QQ空间</span></a></li>
            <li><a href="javascript:void(function(){var d=document,e=encodeURIComponent,r=&#39;https://twitter.com/share?url=&#39;+e(&#39;https://www.jianshu.com/p/45cbd324ea65?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=twitter&#39;)+&#39;&amp;text=&#39;+e(&#39;推荐 黑暗中的孤影 的文章《iOS开发技巧系列---详解KVC(我告诉你KVC的一切)》（ 分享自 @jianshucom ）&#39;)+&#39;&amp;related=&#39;+e(&#39;jianshucom&#39;),x=function(){if(!window.open(r,&#39;twitter&#39;,&#39;toolbar=0,resizable=1,scrollbars=yes,status=1,width=600,height=600&#39;))location.href=r};if(/Firefox/.test(navigator.userAgent)){setTimeout(x,0)}else{x()}})();"><i class="social-icon-sprite social-icon-twitter"></i><span>分享到Twitter</span></a></li>
            <li><a href="javascript:void(function(){var d=document,e=encodeURIComponent,r=&#39;https://www.facebook.com/dialog/share?app_id=483126645039390&amp;display=popup&amp;href=https://www.jianshu.com/p/45cbd324ea65?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=facebook&#39;,x=function(){if(!window.open(r,&#39;facebook&#39;,&#39;toolbar=0,resizable=1,scrollbars=yes,status=1,width=450,height=330&#39;))location.href=r};if(/Firefox/.test(navigator.userAgent)){setTimeout(x,0)}else{x()}})();"><i class="social-icon-sprite social-icon-facebook"></i><span>分享到Facebook</span></a></li>
            <li><a href="javascript:void(function(){var d=document,e=encodeURIComponent,r=&#39;https://plus.google.com/share?url=&#39;+e(&#39;https://www.jianshu.com/p/45cbd324ea65?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=google_plus&#39;),x=function(){if(!window.open(r,&#39;google_plus&#39;,&#39;toolbar=0,resizable=1,scrollbars=yes,status=1,width=450,height=330&#39;))location.href=r};if(/Firefox/.test(navigator.userAgent)){setTimeout(x,0)}else{x()}})();"><i class="social-icon-sprite social-icon-google"></i><span>分享到Google+</span></a></li>
            <li><a href="javascript:void(function(){var d=document,e=encodeURIComponent,s1=window.getSelection,s2=d.getSelection,s3=d.selection,s=s1?s1():s2?s2():s3?s3.createRange().text:&#39;&#39;,r=&#39;http://www.douban.com/recommend/?url=&#39;+e(&#39;https://www.jianshu.com/p/45cbd324ea65?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=douban&#39;)+&#39;&amp;title=&#39;+e(&#39;iOS开发技巧系列---详解KVC(我告诉你KVC的一切)&#39;)+&#39;&amp;sel=&#39;+e(s)+&#39;&amp;v=1&#39;,x=function(){if(!window.open(r,&#39;douban&#39;,&#39;toolbar=0,resizable=1,scrollbars=yes,status=1,width=450,height=330&#39;))location.href=r+&#39;&amp;r=1&#39;};if(/Firefox/.test(navigator.userAgent)){setTimeout(x,0)}else{x()}})()"><i class="social-icon-sprite social-icon-douban"></i><span>分享到豆瓣</span></a></li>
          </ul>
        '>更多分享</a>
      </div>
    </div>
      <a id="web-note-ad-1" target="_blank" href="/apps/redirect?utm_source=note-bottom-click"><img src="//cdn2.jianshu.io/assets/web/web-note-ad-1-c2e1746859dbf03abe49248893c9bea4.png" alt="Web note ad 1" /></a>
    <!--
    <div id="note-comment-above-ad-container">
      <span id="youdao-comment-ad" class="ad-badge">广告</span>
    </div>
    -->
    <div id="vue_comment"></div>
  </div>

  <div class="vue-side-tool" props-data-props-show-qr-code="0"></div>
</div>
<div class="note-bottom">
  <div class="js-included-collections"></div>
  <div data-vcomp="recommended-notes" data-lazy="1.5" data-note-id="3663234"></div>
  <!-- 相关文章 -->
  <div class="seo-recommended-notes">

        <div class="note ">
                    <a class="title" target="_blank" href="/p/e9fbc65a7272?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">KVC详解</a>
          <p class="description">KVC简单介绍 KVC（Key-value coding）键值编码，就是指iOS的开发中，可以允许开发者通过Key名间接访问对象的属性，或者给对象的属性赋值。而不需要调用明确的存取方法。这样就可以在运行时动态在访问和修改对象的属性，而不是在编译时确定。 KVC在iOS中的定...</p>
          <a class="author" target="_blank" href="/u/8e0492cb13d8?utm_campaign=maleskine&amp;utm_content=user&amp;utm_medium=seo_notes&amp;utm_source=recommendation">
            <div class="avatar">
              <img src="//upload.jianshu.io/users/upload_avatars/4999539/d3ad6eab-64fb-4ac7-9b1e-e928c3b34563.png?imageMogr2/auto-orient/strip|imageView2/1/w/48/h/48" alt="48" />
            </div>
            <span class="name">公子无礼</span>
</a>        </div>

        <div class="note ">
                    <a class="title" target="_blank" href="/p/00ab3cda59c7?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">KVC原理详解</a>
          <p class="description">KVC（Key-value coding）键值编码，单看这个名字可能不太好理解。其实翻译一下就很简单了，就是指iOS的开发中，可以允许开发者通过Key名直接访问对象的属性，或者给对象的属性赋值。而不需要调用明确的存取方法。这样就可以在运行时动态在访问和修改对象的属性。而不是...</p>
          <a class="author" target="_blank" href="/u/30e81d90f114?utm_campaign=maleskine&amp;utm_content=user&amp;utm_medium=seo_notes&amp;utm_source=recommendation">
            <div class="avatar">
              <img src="//upload.jianshu.io/users/upload_avatars/4639197/e27d95a6-8a4d-4d0d-b2b6-58603c6af04c.jpg?imageMogr2/auto-orient/strip|imageView2/1/w/48/h/48" alt="48" />
            </div>
            <span class="name">森严之秘</span>
</a>        </div>

        <div class="note have-img">
          <a class="cover" target="_blank" href="/p/4811d447b1dd?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">
            <img src="//upload-images.jianshu.io/upload_images/1932148-797952884906484b.png?imageMogr2/auto-orient/strip|imageView2/1/w/300/h/240" alt="240" />
</a>          <a class="title" target="_blank" href="/p/4811d447b1dd?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">详解KVC</a>
          <p class="description">KVC（Key-value coding）键值编码，单看这个名字可能不太好理解。其实翻译一下就很简单了，就是指iOS的开发中，可以允许开发者通过Key名直接访问对象的属性，或者给对象的属性赋值。而不需要调用明确的存取方法。这样就可以在运行时动态在访问和修改对象的属性。而不是...</p>
          <a class="author" target="_blank" href="/u/6ffd6634d577?utm_campaign=maleskine&amp;utm_content=user&amp;utm_medium=seo_notes&amp;utm_source=recommendation">
            <div class="avatar">
              <img src="//upload.jianshu.io/users/upload_avatars/1932148/0eda9b4bd36c.jpg?imageMogr2/auto-orient/strip|imageView2/1/w/48/h/48" alt="48" />
            </div>
            <span class="name">WGP_CN</span>
</a>        </div>

        <div class="note have-img">
          <a class="cover" target="_blank" href="/p/4c0aa9421ac3?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">
            <img src="//upload-images.jianshu.io/upload_images/5308127-01b6d2a219486525.png?imageMogr2/auto-orient/strip|imageView2/1/w/300/h/240" alt="240" />
</a>          <a class="title" target="_blank" href="/p/4c0aa9421ac3?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">KVC的简单使用</a>
          <p class="description">KVC（Key-value coding）键值编码，iOS的开发中，可以允许开发者通过Key名直接访问对象的属性，或者给对象的属性赋值。而不需要调用明确的存取方法。这样就可以在运行时动态在访问和修改对象的属性。而不是在编译时确定，这也是iOS开发中的黑魔法之一。 KVC在i...</p>
          <a class="author" target="_blank" href="/u/5416aa065e39?utm_campaign=maleskine&amp;utm_content=user&amp;utm_medium=seo_notes&amp;utm_source=recommendation">
            <div class="avatar">
              <img src="//upload.jianshu.io/users/upload_avatars/5308127/ae95c983-f1b1-450b-b917-246c24340c3e.jpg?imageMogr2/auto-orient/strip|imageView2/1/w/48/h/48" alt="48" />
            </div>
            <span class="name">CALayer_Sai</span>
</a>        </div>

        <div class="note have-img">
          <a class="cover" target="_blank" href="/p/233c0cb2c11f?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">
            <img src="//upload-images.jianshu.io/upload_images/276390-8955db1a75c05fdf.jpg?imageMogr2/auto-orient/strip|imageView2/1/w/300/h/240" alt="240" />
</a>          <a class="title" target="_blank" href="/p/233c0cb2c11f?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">回家</a>
          <p class="description">每个假日，都选择了回家！心想趁现在时间充裕多陪陪家人。 转眼间毕业已经快一年了，前三个月沉浸在大学四年的回忆与不舍中，中间三个月奔波于职场的奋斗与个人提升中，之后的三个月热衷于与各行各业的伙伴进行交流探讨商业发展现状.困惑乃至解决方案！聊得多了，心也就愈加不安分了。 身边朋...</p>
          <a class="author" target="_blank" href="/u/bdc4d955c8e0?utm_campaign=maleskine&amp;utm_content=user&amp;utm_medium=seo_notes&amp;utm_source=recommendation">
            <div class="avatar">
              <img src="//upload.jianshu.io/users/upload_avatars/276390/ce1b7a5d1ab2.jpg?imageMogr2/auto-orient/strip|imageView2/1/w/48/h/48" alt="48" />
            </div>
            <span class="name">麦刻风</span>
</a>        </div>

        <div class="note ">
                    <a class="title" target="_blank" href="/p/2beec83119d3?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">恶从何处来</a>
          <p class="description">在知乎看到有人描述他的见闻：一个女人在饭店里点餐后在等餐的过程中，酒店的服务员犯了什么错被这女人狂骂，最后酒店经理出来，女人不依不饶，然后酒店经理说：“您真是太象麦克白夫人了”，女人突然气消了说：“你过奖了……” 因为英文阅读能力为零，所以我就去看了朱生豪先生翻译的《麦克白...</p>
          <a class="author" target="_blank" href="/u/851ecb0b681a?utm_campaign=maleskine&amp;utm_content=user&amp;utm_medium=seo_notes&amp;utm_source=recommendation">
            <div class="avatar">
              <img src="//upload.jianshu.io/users/upload_avatars/5733273/557d5310-f90d-4639-a681-37b0e698b042.png?imageMogr2/auto-orient/strip|imageView2/1/w/48/h/48" alt="48" />
            </div>
            <span class="name">独步清凉</span>
</a>        </div>

        <div class="note ">
                    <a class="title" target="_blank" href="/p/dd549bca5d18?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">过了黄河是“河北”</a>
          <p class="description">     我的家在黄河以南，却经常听邻居们说去“河北”购物，直到有一天，终于过了浮桥，来到了河对面——这里却不是“河北”，而是河南！      黄河沿岸的民居都非常有特点，房屋瓦舍建在高高的土岗子之上，土岗子下面是数丈的土坑，土坑里栽种着杨树柳树和很多很多的榆树苗，这些树种...</p>
          <a class="author" target="_blank" href="/u/d8349abb0dd0?utm_campaign=maleskine&amp;utm_content=user&amp;utm_medium=seo_notes&amp;utm_source=recommendation">
            <div class="avatar">
              <img src="//upload.jianshu.io/users/upload_avatars/5884634/ecb98c19-5987-46e0-9a2a-afe86d6369a2.jpg?imageMogr2/auto-orient/strip|imageView2/1/w/48/h/48" alt="48" />
            </div>
            <span class="name">春住我家</span>
</a>        </div>

        <div class="note ">
                    <a class="title" target="_blank" href="/p/a8ac59b826c3?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">（祝我的小伙伴生日快乐）</a>
          <p class="description">今天小可爱们过生日 看生命是如此的年轻 年轻的如天空般纯净 那往昔欢愉的壮景 似鲜花爬满眼睛 愿像恒星的生命 追寻着你我前行</p>
          <a class="author" target="_blank" href="/u/6e795e543f8b?utm_campaign=maleskine&amp;utm_content=user&amp;utm_medium=seo_notes&amp;utm_source=recommendation">
            <div class="avatar">
              <img src="//upload.jianshu.io/users/upload_avatars/6375446/fca9a6bf-dbef-4079-87c2-2637669e054d?imageMogr2/auto-orient/strip|imageView2/1/w/48/h/48" alt="48" />
            </div>
            <span class="name">大气睿智</span>
</a>        </div>

        <div class="note have-img">
          <a class="cover" target="_blank" href="/p/a69979803849?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">
            <img src="//upload-images.jianshu.io/upload_images/8960308-f9e8da852c16b950.jpg?imageMogr2/auto-orient/strip|imageView2/1/w/300/h/240" alt="240" />
</a>          <a class="title" target="_blank" href="/p/a69979803849?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">初冬的阳光</a>
          <p class="description">青色烟雨， 初冬的晨曦洒满路面。 晨光临到我们每一人。 至死追寻的也许只是虚空一场， 来也匆匆去也无声的寂寥里， 唯有你亲密的爱人， 安慰了太多恐慌又无奈的流离。 唯有你亲密的爱人， 温柔了嶙峋又苦涩的人生。 唯有你我的爱人， 让初冬的阳光可以这么的靓丽与温暖。 与你同行，...</p>
          <a class="author" target="_blank" href="/u/5c47a5ec9eff?utm_campaign=maleskine&amp;utm_content=user&amp;utm_medium=seo_notes&amp;utm_source=recommendation">
            <div class="avatar">
              <img src="//upload.jianshu.io/users/upload_avatars/8960308/4608114f-bfaa-43f2-87f4-84f3b58e91c8.jpg?imageMogr2/auto-orient/strip|imageView2/1/w/48/h/48" alt="48" />
            </div>
            <span class="name">营盘</span>
</a>        </div>
  </div>
</div>

    <script type="application/json" data-name="page-data">{"user_signed_in":false,"locale":"zh-CN","os":"other","read_mode":"day","read_font":"font2","note_show":{"is_author":false,"is_following_author":false,"is_liked_note":false,"follow_state":0,"uuid":"f66c605f-9748-4ee7-9029-6db4922904d4"},"note":{"id":3663234,"slug":"45cbd324ea65","user_id":1281203,"notebook_id":2609834,"commentable":true,"likes_count":310,"views_count":27237,"public_wordage":6369,"comments_count":77,"featured_comments_count":0,"total_rewards_count":0,"is_author":false,"paid_type":"free","paid":false,"paid_content_accessible":false,"author":{"nickname":"黑暗中的孤影","total_wordage":39051,"followers_count":807,"total_likes_count":838}}}</script>
    
    <script src="//cdn2.jianshu.io/assets/babel-polyfill-6cd2d6b53fe3184b71cc.js" crossorigin="anonymous"></script>
    <script src="//cdn2.jianshu.io/assets/web-base-584410064c331de9985c.js" crossorigin="anonymous"></script>
<script src="//cdn2.jianshu.io/assets/web-6f4f0bd35164774ef287.js" crossorigin="anonymous"></script>
    
    <script src="//cdn2.jianshu.io/assets/web/pages/notes/show/entry-cdb8bd3264abc721fa90.js" crossorigin="anonymous"></script>
    <script>
  (function(){
      var bp = document.createElement('script');
      var curProtocol = window.location.protocol.split(':')[0];
      if (curProtocol === 'https') {
          bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';
      }
      else {
          bp.src = 'http://push.zhanzhang.baidu.com/push.js';
      }
      var s = document.getElementsByTagName("script")[0];
      s.parentNode.insertBefore(bp, s);
  })();
</script>

  </body>
</html>
